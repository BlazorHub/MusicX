@page "/songslist/"
@page "/songslist/{PageNumber:int}"
@using MusicX.Web.Shared.Songs
@inject IUriHelper UriHelper;

<h1>Songs list</h1>

<ErrorsList Errors=@this.response?.Errors />

@if (this.response?.Data?.Songs == null)
{
    <p><em>Loading...</em></p>
}
else
{
     foreach (var song in this.response.Data.Songs)
     {
         <div class="card d-inline-block align-top" style="width: 13rem;">
             <img class="card-img-top" src="@song.ImageUrl" alt="Card image cap">
             <div class="card-body">
                 <h5 class="card-title">@song.SongName</h5>
                 <p class="card-text"></p>
                 @if (!string.IsNullOrWhiteSpace(song.PlayableUrl))
                 {
                     <button class="btn btn-primary" onclick="@(() => this.PlaySong(song.PlayableUrl))">Play</button>
                 }
             </div>
         </div>
     }
    <div class="clear-fix"></div>
    for (var i = 1; i <= this.response?.Data.Pages; i++)
    {
        var currentIndex = i;
        <a class="btn btn-primary" href="songslist/@i" onclick="@(() => this.ChangePage(currentIndex))">@i</a>
    }
}

@functions {

    [Parameter]
    private int PageNumber { get; set; } = 1;

    ApiResponse<SongsListResponseModel> response;

    protected override async Task OnInitAsync()
    {
        this.response = await this.ApiClient.GetSongsList(this.PageNumber);
    }

    void PlaySong(string url)
    {
        JsInterop.MediaPlayerSetSource(url);
        JsInterop.MediaPlayerPlay();
    }

    async Task ChangePage(int page)
    {
        this.PageNumber = page;
        this.response = await this.ApiClient.GetSongsList(page);
    }
}
